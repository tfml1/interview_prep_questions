React Fiber is a rendering algorithm and schedule of React that replaces the previous rendering model known as "reconciliation" in React 16.x. React Fiber is designed to be more flexible and efficient, providing better performance and developer experience.
React Fiber uses a concept called "memoization" to reuse the work done by previous renders, which significantly improves rendering performance, especially for lists of components. It achieves this by using a new data structure called a "fiber" that represents the state of a component and its children.
Here's a simple example to demonstrate how React Fiber works:
    Create a functional component called MyComponent:

const MyComponent = (props) => {
  return (
    <div>
      <h1>My Component</h1>
      <p>Hello, {props.name}!</p>
      <MyComponent name="Alice" />
    </div>
  );
};

    Render the MyComponent component:

ReactDOM.render(<MyComponent name="Bob" />, document.getElementById('root'));

    React Fiber's rendering process would look something like this:
a. React creates a ReactFiberNode (a.k.a., a "fiber") for the MyComponent component.
b. It then creates a ReactFiberElement (a.k.a., a "fiber child") for the div element inside MyComponent.
c. It creates another ReactFiberElement for the h1 element inside MyComponent.
d. It creates a ReactFiberElement for the p element inside MyComponent.
e. It creates a ReactFiberElement for the MyComponent component inside MyComponent.
f. React optimizes the work done in step e by reusing the ReactFiberElement for the MyComponent component from the parent.
g. It renders the ReactFiberElement for the MyComponent component from the parent, creating a new ReactFiberChild for the MyComponent component inside MyComponent.
h. It renders the ReactFiberElement for the MyComponent component from the parent, creating a new ReactFiberChild for the MyComponent component inside MyComponent.
i. The ReactFiberElement for the div element inside MyComponent is reused.
j. The ReactFiberElement for the h1 element inside MyComponent is reused.
k. The ReactFiberElement for the p element inside MyComponent is reused.
l. The newly rendered ReactFiberChild for the MyComponent component from the parent is inserted into the ReactFiberElement for the div element inside MyComponent.
m. The final output of the rendering process is:

<div>
  <h1>My Component</h1>
  <p>Hello, Bob!</p>
  <div>
    <h1>My Component</h1>
    <p>Hello, Alice!</p>
  </div>
</div>

In this example, React Fiber reuses the work done by the parent MyComponent component when rendering a child MyComponent component. This can significantly improve rendering performance, especially when rendering lists of components.
React Fiber is a key feature of React 17 and later versions, and it provides a more efficient and flexible rendering model compared to the previous reconciliation model in React 16.x.
React Fiber is a new rendering algorithm and architecture for React, a popular JavaScript library for building user interfaces. It was introduced in React 16.8 and is designed to improve the performance and stability of React applications, especially those with complex and dynamic UI layouts.
React Fiber is based on the concept of "fibers," which are lightweight, composable units of work that represent the rendering of a component or a sub-component. Fibers are optimized for batching and prioritization, allowing React to handle a large number of updates and rendering operations efficiently.
Here's a simple demo of React Fiber:

import React from 'react';

const App = () => {
  return (
    <div>
      <h1>React Fiber Demo</h1>
      <button onClick={() => console.log('Hello World!')}>Click me</button>
      <div>
        <Child />
      </div>
    </div>
  );
};

const Child = () => {
  return (
    <div>
      <h2>Child Component</h2>
      <button onClick={() => console.log('Hello from Child!')}>Click me</button>
    </div>
  );
}

const rootElement = document.getElementById('root');
ReactDOM.render(<App />, rootElement);

In this demo, we have two components: App and Child. The App component contains a button that logs "Hello World!" to the console when clicked, and a div element that contains the Child component. The Child component contains a button that logs "Hello from Child!" to the console when clicked.
When we render the App component, React Fiber will first render the Child component, and then render the App component around it. This is because the Child component is a direct child of the App component, and React Fiber will always render the direct children of a component before rendering the component itself.
To demonstrate the benefits of React Fiber, let's imagine that we have a large and complex application with many components and a dynamic UI layout. In this case, React Fiber can help improve the performance and stability of the application
    Improved performance: React Fiber uses a different approach to rendering components, which can lead to improved performance in complex and dynamic UI layouts.
    Better batching: React Fiber uses a concept called "fiber batching" to group together similar updates and render them efficiently. This can help reduce the number of DOM mutations and improve performance.
    Prioritization: React Fiber allows developers to prioritize updates based on their importance, which can help ensure that critical updates are rendered immediately, while less critical updates can be batched and rendered later.
    More control: React Fiber provides more control over the rendering process, allowing developers to customize the rendering behavior and optimize the performance of their applications.
    Better debugging: React Fiber provides better debugging tools, such as the ability to inspect the fiber tree and understand the rendering process.
    Better support for concurrent rendering: React Fiber provides better support for concurrent rendering, which allows developers to render multiple components at the same time and improve the overall performance of the application.
    Better support for server-side rendering: React Fiber provides better support for server-side rendering, which allows developers to render components on the server and improve the performance of their applications.
    Better support for suspense: React Fiber provides better support for suspense, which allows developers to handle asynchronous operations and improve the overall performance of their applications.
Overall, React Fiber is a powerful tool for building high-performance, scalable, and maintainable user interfaces. It provides a new and innovative approach to rendering components, and it can help developers build better and more efficient applications.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Render Props technique in React. Below is a simple example where we have a component named MouseTracker that tracks the mouse position and shares its state via a render prop with a functional component.

Here is the MouseTracker component:

import React, { useState } from "react";
const MouseTracker = ({ render }) => {
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const handleMouseMove = event => {
    setPosition({  x: event.clientX,
                   y: event.clientY })}
return (
    <div style={{ height: '100vh' }} onMouseMove={handleMouseMove}>
      {render(position)}
    </div> )}
export default MouseTracker;

The MouseTracker component tracks the mouse position and passes it to the render function as a parameter. This render function is provided as a prop when the MouseTracker component is used.
Here is how you can use the MouseTracker component:

import MouseTracker from "./MouseTracker";
const DisplayMousePosition = () => (
  <MouseTracker
    render={({ x, y }) => (
      <h1> The mouse position is ({x}, {y}) </h1> )} /> )
export default DisplayMousePosition;

In this DisplayMousePosition component, we are using the MouseTracker component and passing a function as a render prop. This function receives the mouse position and displays it.
The MouseTracker component encapsulates the logic for tracking the mouse position. It renders a div that handles the onMouseMove event and updates the mousePosition state.
The render prop is a function that is called by MouseTracker, passing in the mousePosition state. This allows the consumer of MouseTracker to decide what to render with the mouse position, without needing to know the implementation details.
So by passing a function as a child to MouseTracker, we can reuse the mouse tracking logic in a reusable way. This is the essence of the render props pattern.
-------------------------
Render props is a technique in React where a component accepts a
function as a prop and uses it to render content. This allows the
component to share its internal state and logic with the function
component passed as a prop, enabling code reuse and
composability.
---------------------------------
another example of using "Render Props" in React.
// We have a Counter component that manages a count state and provides a way to increment it:
import React, { useState } from "react";
const Counter = ({ render }) => { // render prop recived frm parent
  const [count, setCount] = useState(0);
  const increment = () => { setCount(count + 1) }
  return ( <div> {render(count, increment)} </div> )}
export default Counter;
// Now, we can use this Counter component and pass a function as a render prop to render whatever we want based on the count state and the increment function:
import Counter from "./Counter";
const App = () => (
  <Counter
    render={(count, increment) => (
      <div>
        <p>The count is: {count}</p>
        <button onClick={increment}>Increment</button>
      </div> )} />) // count n onclick passed as renderprop to another component 
export default App;
In this App component, we are using the Counter component and passing a function as a render prop. This function receives the count state and the increment function, and renders a paragraph and a button. When the button is clicked, the increment function is called, updating the count state in the Counter component

---------------------------------------------------------------------------------------------------------------------------------------------------

Portals in React allow you to render components into DOM nodes that exist outside the DOM hierarchy of the parent component.
Some key things to know about portals in React:
    Portals provide a way to escape parent component DOM restriction. Normally React components render into the DOM tree of their parent component. With portals, you can render components into any DOM node.
    Portals still maintain lifecycle and context with their parent component. Even though a portal renders outside of the parent's DOM hierarchy, it still behaves like a normal React child component. Context and lifecycle methods work as expected.
    Common uses of portals include dialogs, hovercards, and tooltips. Since these UI elements need to float over other content, portals allow you to render them outside the normal DOM flow.
    The portal component returns null in the React tree. The children are rendered in a different location.
    Portals have a first-class API in ReactDOM starting with React 16. Creating a portal looks like:
            ReactDOM.createPortal(child, container)
Where child is the component/elements to render and container is the DOM node to render into.
In summary, portals in React allow you to break out of component restriction and render components in locations outside the parent component hierarchy. Useful for overlays and dialogs.
portal demo with funct components
Here is an example of a portal demo with React functional components:

import React, { useRef, useState } from 'react';
import ReactDOM from 'react-dom';
const Modal = ({ children }) => {
  const elRef = useRef(null);
  if (!elRef.current) {
    elRef.current = document.createElement('div') }
  return ReactDOM.createPortal(
    children, 
    elRef.current  )}
const App = () => {
  const [showModal, setShowModal] = useState(false);
  return (
    <div>
      <button onClick={() => setShowModal(true)}>Show Modal</button>
      <Modal>
        {showModal && (
          <div style={{ 
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            padding: '10px',
            background: 'white' 
          }}>
            This is the modal content!
            <button onClick={() => setShowModal(false)}>Close</button>
          </div>
        )}
      </Modal>
    </div> )}
ReactDOM.render(<App />, document.getElementById('root'));

The key things to note:
    Modal component uses useRef hook to create a div element as the portal container
    ReactDOM.createPortal renders the children into the portal container
    App conditionally shows the modal content when showModal is true
    Modal is positioned absolutely to center in the viewport

-----------------------------------------------------------------------------------------------------------------------

DangerouslySetstate is a React API that allows you to update the state of a component without going through the normal reconciliation process. This can be useful for performance reasons, or when you need to update the state of a component in response to an event that is not directly related to the component's props.
For example, let's say you have a component that renders a list of items. You could use dangerouslySetstate to update the list of items in response to a user click event. This would be more performant than calling setState directly, because it would avoid the need to re-render the entire component.
Here is a demo of how to use dangerouslySetstate:

import React, { useState } from "react";

const MyComponent = () => {
  const [items, setItems] = useState([]);

  const handleClick = () => {
    // This will update the state of the component without going through the normal reconciliation process.
    dangerouslySetstate({
      items: [...items, "New item"],
    });
  };

  return (
    <div>
      <ul>
        {items.map((item) => (
          <li key={item}>{item}</li>
        ))}
      </ul>
      <button onClick={handleClick}>Add new item</button>
    </div>
  );
};

export default MyComponent;

As you can see, using dangerouslySetstate is very simple. Just call the dangerouslySetstate function with the new state object as the argument. Be aware that using dangerouslySetstate can lead to unexpected behavior, so use it with caution.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Code splitting is a technique used in React to split a large JavaScript bundle into smaller, more manageable pieces that can be loaded efficiently by the browser. This technique is particularly useful when dealing with large, complex applications where the initial load time can be a problem.
In React, code splitting can be achieved using the react-router library, which provides a mechanism for splitting the code into smaller chunks that can be loaded on demand. This is done by using the react-router-dom library and its Route component to define different routes for different parts of the application.
Here's a simple example of how code splitting can be implemented in a React application:

import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/features" component={Features} />
        <Route path="/docs" component={Docs} />
      </Switch>
    </Router> )}
function Home() {
  return ( <div>
             <h1>Welcome to the home page</h1>
           </div> )}
function Features() {
  return ( <div>
            <h1>Features</h1>
            <ul>
              <li>Feature 1</li>
              <li>Feature 2</li>
              <li>Feature 3</li>
            </ul>
          </div> )}
function Docs() {
  return (
    <div>
      <h1>Documentation</h1>
      <p>This is the documentation page</p>
    </div> )}
In this example, we have a single entry point for the application, which is the App component. The App component uses the Switch component from react-router-dom to route the user to different parts of the application based on the URL
----------------------
Code splitting is a technique that allows you to load different parts of your React application into the browser on demand. This can improve the performance of your application by reducing the initial loading time.
There are a few different ways to code split your React application. One common way is to use the React.lazy() function. This function allows you to load a component asynchronously, which means that it will not be loaded until it is needed.
Here is an example of how you can use React.lazy() to code split your application:

import React, { lazy } from "react";
const Home = lazy(() => import("./components/Home"));
const About = lazy(() => import("./components/About"));
const App = () => {
  return ( <div>
              <Home />
              <About />
           </div> )}
export default App;
In this example, the Home and About components are loaded asynchronously. This means that they will not be loaded until they are needed. This can improve the performance of your application because it will not need to load all of the components at once.
-------------------------------
Another way to code split your React application is to use the React.loadable() function. This function is similar to React.lazy(), but it provides more control over the loading process.
Here is an example of how you can use React.loadable() to code split your application:
import React, { loadable } from "react";
const Home = loadable(() => import("./components/Home"));
const About = loadable(() => import("./components/About"));
const App = () => {
  return (  <div>
              <Home />
              <About />
           </div> )}
export default App;
In this example, the Home and About components are loaded using the loadable() function. This function provides more control over the loading process than React.lazy().
Code splitting can improve the performance of your React application by reducing the initial loading time. However, it is important to use code splitting carefully because it can also make your application more complex.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Error boundaries are a React feature that can help you catch and handle errors in your application. They work by wrapping a component tree in a special component called an error boundary. When an error occurs in a component that is inside the error boundary, the error boundary will catch the error and display a fallback UI. This prevents the error from causing the entire application to crash.
Here is an example of how you can use an error boundary in a React application:

import React, { useState } from "react";
const MyApp = () => {
  const [name, setName] = useState("");
  return (
    <div>
      <h1>My App</h1>
      <input type="text" value={name} onChange={setName} />
      <button onClick={() => {
        // This function will throw an error.
        throw new Error("An error occurred");
      }}>
        Submit
      </button>
    </div> )}

const ErrorBoundary = () => {
  const [isError, setIsError] = useState(false);
  return (
    <div>
      {isError && <p>An error occurred</p>}
      {!isError && <MyApp />}
    </div> )}
export default ErrorBoundary;

In this example, the MyApp component is wrapped in an ErrorBoundary component. This means that if an error occurs in the MyApp component, the ErrorBoundary will catch the error and display a fallback UI.
The fallback UI in this example is a simple element that tells the user that an error has occurred. You can customize the fallback UI to meet your needs.
Error boundaries can be very useful for catching and handling errors in your React application. They can help you prevent the entire application from crashing and provide a better user experience.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

StrictMode component is a component that was introduced in React 18.0 as a way to opt-in to a stricter mode of React rendering.
In React, components are rendered in a "lenient" mode by default, which means that React will try its best to render the component even if it encounters errors or unexpected input. This lenient mode is useful for development and debugging, as it allows developers to see the output of their components even if there are errors in the code.
However, in some cases, developers may want to ensure that their components are rendered in a stricter mode, where errors are caught and reported more aggressively. This is where React.StrictMode comes in.
When a component is wrapped in React.StrictMode, React will render the component in a stricter mode, which means that errors will be caught and reported more aggressively. This can help developers identify and fix errors in their code more quickly, as they will see the errors reported in the console or in the browser's developer tools.
Additionally, React.StrictMode also enables some additional features, such as:
    Strict mode for JSX: In strict mode, React will not allow certain syntax features that are not allowed in JSX, such as using () instead of {} for function calls.
    Strict mode for props: In strict mode, React will not allow props to be passed to components that are not explicitly defined in the component's propTypes.
    Strict mode for state: In strict mode, React will not allow state to be set to undefined or null.
By using React.StrictMode, developers can ensure that their components are rendered in a stricter mode, which can help them catch and fix errors more quickly and ensure that their code is more robust and maintainable.
------------------------
React.StrictMode is a React component that can be used to help catch errors in your React application. It does this by enforcing certain rules that are not enforced by default in React.
For example, React.StrictMode will throw an error if you try to use a non-existent property on a component, or if you try to use a component that is not exported from a file.
React.StrictMode can be useful for catching errors early in the development process, before they cause problems in your production code.
Here is an example of how you can use React.StrictMode in your application:
import React, { StrictMode } from "react";
const App = () => {
  return (
    <StrictMode>
      <h1>My App</h1>
      <p>This is my app.</p>
    </StrictMode> )}
export default App;
In this example, React.StrictMode is used to wrap the entire App component. This means that all of the components inside of App will be subject to the stricter rules that are enforced by React.StrictMode.
If you try to use a non-existent property on a component inside of App, or if you try to use a component that is not exported from a file, React.StrictMode will throw an error. This will help you catch errors early in the development process, before they cause problems in your production code.
It is important to note that React.StrictMode is not meant to be used in production code. It is only meant to be used for development purposes. In production code, you should not use React.StrictMode because it will make your application slower.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

React.cloneElement is a method that creates a new copy of a React element, 
allowing you to reuse the element or any of its child elements. 
It's particularly useful when you want to create a new element that's similar to an existing one, 
but with some changes.
Here's an example of how to use React.cloneElement with a functional component:
import React from 'react';
function MyComponent() {
  return (
    <div>
      <h1>Hello World!</h1>
      <p>This is a paragraph</p>
    </div> )}
function MyNewComponent() {
  const newElement = React.cloneElement(<MyComponent />);
  // Make some changes to the cloned element
  newElement.props.children = <p>This is a new paragraph</p>;
  return newElement;
}
const App = () => {
  return (
    <div>
      <MyComponent />
      <MyNewComponent />
    </div> )}
const rootElement = document.getElementById('root');
ReactDOM.render(<App />, rootElement);
In this example, we define a functional component called MyComponent that renders an h1 heading and a paragraph. We then define another functional component called MyNewComponent that uses React.cloneElement to create a new copy of MyComponent.
We then make some changes to the cloned element, such as replacing the paragraph with a new one. Finally, we render both MyComponent and MyNewComponent in a parent component called App.
Here's what the output would look like:
<div>
  <h1>Hello World!</h1>
  <p>This is a paragraph</p>
  <h1>Hello World!</h1>
  <p>This is a new paragraph</p>
</div>
As you can see, MyNewComponent has its own copy of the MyComponent element, with the changes we made to the cloned element

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 React.Children:
The React.Children utility provides a set of methods for working with
the props.children property of a React component. It allows you to
iterate, map, and count the children of a component, regardless of
whether they are single elements or arrays of elements.
The React.Children component takes two arguments: the first is the child component that we want to add,
 the second is a function that will be called to render the child component. 
// Consider a Parent component that renders a list of Child components:
import React from 'react';
import Child from './Child';
function Parent() {
  return (
    <div>
      <Child name="John" />
      <Child name="Jane" />
    </div>  )}
export default Parent;
// Now, let's create a Child component that takes a name prop and displays it:
import React from 'react';
function Child({ name }) {
  return <h1>Hello, {name}!</h1>  }
export default Child;
// In this case, React.Children.map can be used to iterate over the children and extract the name prop from each child:
import React from 'react';
import { ReactChildren } from 'react';
import Child from './Child';
function Parent() {
  return (
    <div>
      <Child name="John" />
      <Child name="Jane" />
    </div> )}
const Children = ReactChildren.map(Parent, child =>
  React.Children.only(child))
console.log(Children);
    In this example, React.Children.map is used to iterate over the Children object returned by ReactChildren.map(Parent, child => React.Children.only(child)) and extract the name prop from each Child component.
    The ReactChildren module in React provides a set of utility functions to work with children nodes in a component. The ReactChildren.map function is used to apply a mapping function to each child in a set of children. In this case, the mapping function is React.Children.only, which is used to filter the children and return only the ones that are elements.
    The Children constant holds an array of ReactElement objects, each representing a child in the Parent component. The ReactElement objects can be rendered with ReactDOM.render

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The componentDidCatch method is a lifecycle method in React that
is called when an error occurs within a component's child tree. It
allows the component to catch the error and handle it gracefully by
displaying an error boundary or a fallback UI. 
------------------------
componentDidCatch in a functional component with React hooks:
import React, { useState, useEffect } from 'react';
function MyComponent(props) {
  const [error, setError] = useState(null);
  useEffect(() => {
    try {  // Some code that might cause an error } 
    catch (err) { // Catch errors in component code
      setError(err) } })
  // Component interface and rendering
  if (error) { return <h1>An error occurred: {error.message}</h1> }
     else { return <div>{props.children}</div>  }}
MyComponent.componentDidCatch = (error, info) => {
  // Handle errors that occur in child components
  console.log('Component did catch an error', error, info)  }
export default MyComponent;
The componentDidCatch static method is defined on the component to handle errors from child components. It logs the error and info passed to it.
Inside the component, useState manages an error state. useEffect tries some code and catches any errors, updating the error state.
The component renders conditionally based on if an error exists, and displays the error message if so.
This allows the component to catch and handle errors from itself and its children elegantly
--------------------------------
In React, componentDidCatch is a lifecycle method available on class components 
that is called after a component has attempted to render itself, 
but failed (for example, if the component renders a broken promise). The purpose of componentDidCatch is to catch any errors that occur during the rendering process and prevent them from crashing the application by displaying an error message to the user.
// Let's create a simple functional component to demonstrate how to use componentDidCatch. We will create a form with an input field and a submit button. When the user clicks the submit button, we will attempt to fetch some data from an API. If the API request fails, we will display an error message.
import React, { useState, useEffect } from 'react';
const ErrorMessage = ({ message }) => { return <div>{message}</div> }
const App = () => {
  const [inputValue, setInputValue] = useState('');
  const [error, setError] = useState('');
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/posts');
      const data = await response.json();
      setInputValue(data.title) }
     catch (error) {
      setError('Failed to fetch data from the API') }}
  useEffect(() => {
    const message = error ? `Error: ${error}` : null;
    console.log(message);
  }, [error]);
  return ( <div>
            <h1>Error Catch Demo</h1>
            <form onSubmit={handleSubmit}>
              <input type="text" value={inputValue}
                onChange={(e) => setInputValue(e.target.value)} />
              <button type="submit">Submit</button>
            </form>
              </div>   )}
export default App;
In the code above, we've added a conditional rendering of the ErrorMessage component inside a div container. The ErrorMessage component accepts a message prop, which we will pass in the form of an error message if one occurs.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------







